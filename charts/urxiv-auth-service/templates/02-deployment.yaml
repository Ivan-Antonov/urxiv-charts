apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.name }}"
  namespace: "{{ .Values.namespace }}"
  labels:
    subsystem: "{{ .Values.labels.subsystem }}"
    container: "{{ .Values.name }}"
    service-group: api
    log-style: uwsgi
    env: "{{ .Values.namespace }}"
spec:
  replicas: {{  int .Values.scaling.replicas }}
  selector:
    matchLabels:
      subsystem: "{{ .Values.labels.subsystem }}"

  template:
    metadata:
      labels:
        subsystem: "{{ .Values.labels.subsystem }}"
        container: "{{ .Values.name }}"
        service-group: api
        log-style: uwsgi
        env: "{{ .Values.namespace }}"

    spec:
      serviceAccount: urxiv-auth
      # volumes:
      #   - name: vault-token
      #     emptyDir: {}
      #   - name: vault-certficate
      #     secret:
      #       secretName: vault-certificate

      containers:
        - name: "{{ .Values.name }}-accounts"
          image: "{{ .Values.accounts.image.name }}:{{ .Values.accounts.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8081

          # readinessProbe:
          #   initialDelaySeconds: 30
          #   periodSeconds: 30
          #   httpGet:
          #     path: "{{ .Values.accounts.path}}/status"
          #     port: 8081

          env:
            - name: BASE_SERVER
              value: "{{ .Values.ingress.host }}"

            - name: NAMESPACE
              value: "{{ .Values.namespace }}"
            - name: SECRET_KEY
              value: "{{ .Values.env.aws.key }}"
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.env.aws.key_id }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.env.aws.key_secret }}"
            - name: AWS_REGION
              value: "{{ .Values.env.aws.region }}"
            - name: REDIS_HOST
              value: "{{ .Values.env.redis.host }}"
            - name: REDIS_PORT
              value: "{{ .Values.env.redis.port }}"
            - name: REDIS_DATABASE
              value: "{{ .Values.env.redis.database }}"
            - name: REDIS_CLUSTER
              value: "1"

            - name: JWT_SECRET
              value: "{{ .Values.env.jwt.secret }}"

            - name: DEFAULT_LOGIN_REDIRECT_URL
              value: "https://{{ .Values.ingress.host }}/user"
            - name: DEFAULT_LOGOUT_REDIRECT_URL
              value: "https://{{ .Values.ingress.host }}"

            - name: CAPTCHA_SECRET
              value: "{{ .Values.env.captcha.secret}}"

            - name: CLASSIC_DATABASE_URI
              value: "{{ .Values.env.db.endpoint }}"
            - name: SQLALCHEMY_TRACK_MODIFICATIONS
              value: "False"

            - name: VAULT_ENABLED
              value: "0"
            - name: VAULT_HOST
              value: "{{ .Values.env.vault.host }}"
            - name: VAULT_PORT
              value: "{{ .Values.env.vault.port }}"
            - name: VAULT_CERT
              value: /etc/vault-certificate/default-cert.pem
            - name: VAULT_ROLE
              value: "{{ .Values.env.vault.role }}"

            - name: ACCOUNTS_SERVER_NAME
              value: "{{ .Values.name }}-accounts"
            - name: AUTH_SESSION_COOKIE_DOMAIN
              value: "{{ .Values.ingress.host }}"
            - name: PREFERRED_URL_SCHEME
              value: "https"

            - name: FLASKS3_ACTIVE
              value: "1"
            - name: FLASKS3_BUCKET_NAME
              value: "{{ .Values.env.s3.bucket_name }}"
            - name: FLASKS3_CDN_DOMAIN
              value: "{{ .Values.env.s3.service }}"
            - name: FLASKS3_USE_HTTPS
              value: "0"

          # volumeMounts:
          #   - name: vault-certificate
          #     mountPath: /etc/vault-certificate
          #     readOnly: true
          #   - name: vault-token
          #     mountPath: /etc/vault

          resources:
            limits:
              cpu: 300m
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 256Mi

        - name: "{{ .Values.name }}-registry"
          image: "{{ .Values.registry.image.name }}:{{ .Values.registry.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8082

          # readinessProbe:
          #   initialDelaySeconds: 30
          #   periodSeconds: 30
          #   httpGet:
          #     path: "{{ .Values.registry.path}}/status"
          #     port: 8082
          env:
            - name: BASE_SERVER
              value: "{{ .Values.ingress.host }}"

            - name: NAMESPACE
              value: "{{ .Values.namespace }}"
            - name: SECRET_KEY
              value: "{{ .Values.env.aws.key }}"
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.env.aws.key_id }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.env.aws.key_secret }}"
            - name: AWS_REGION
              value: "{{ .Values.env.aws.region }}"

            - name: REDIS_HOST
              value: "{{ .Values.env.redis.host }}"
            - name: REDIS_PORT
              value: "{{ .Values.env.redis.port }}"
            - name: REDIS_DATABASE
              value: "{{ .Values.env.redis.database }}"
            - name: REDIS_CLUSTER
              value: "1"

            - name: JWT_SECRET
              value: "{{ .Values.env.jwt.secret }}"

            - name: DEFAULT_LOGIN_REDIRECT_URL
              value: "https://{{ .Values.ingress.host }}/user"
            - name: DEFAULT_LOGOUT_REDIRECT_URL
              value: "https://{{ .Values.ingress.host }}"

            - name: CLASSIC_DATABASE_URI
              value: "{{ .Values.env.db.endpoint }}"
            - name: SQLALCHEMY_TRACK_MODIFICATIONS
              value: "False"

            - name: VAULT_ENABLED
              value: "0"
            - name: VAULT_HOST
              value: "{{ .Values.env.vault.host }}"
            - name: VAULT_PORT
              value: "{{ .Values.env.vault.port }}"
            - name: VAULT_CERT
              value: /etc/vault-certificate/default-cert.pem
            - name: VAULT_ROLE
              value: "{{ .Values.env.vault.role }}"

            - name: ACCOUNTS_SERVER_NAME
              value: "{{ .Values.name }}-accounts"
            - name: AUTH_SESSION_COOKIE_DOMAIN
              value: "{{ .Values.ingress.host }}"
            - name: PREFERRED_URL_SCHEME
              value: "https"

            - name: VAULT_ENABLED
              value: "{{ .Values.env.vault.enabled }}"

            - name: FLASKS3_ACTIVE
              value: "1"
            - name: FLASKS3_BUCKET_NAME
              value: "{{ .Values.env.s3.bucket_name }}"
            - name: FLASKS3_CDN_DOMAIN
              value: "{{ .Values.env.s3.service }}"
            - name: FLASKS3_USE_HTTPS
              value: "0"


          # volumeMounts:
          #   - name: vault-certificate
          #     mountPath: /etc/vault-certificate
          #     readOnly: true
          #   - name: vault-token
          #     mountPath: /etc/vault

          resources:
            limits:
              cpu: 300m
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 256Mi


        - name: "{{ .Values.name }}-authenticator"
          image: "{{ .Values.authenticator.image.name }}:{{ .Values.authenticator.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8083

          # readinessProbe:
          #   initialDelaySeconds: 30
          #   periodSeconds: 30
          #   httpGet:
          #     path: "{{ .Values.authenticator.path}}/status"
          #     port: 8083
          env:
            - name: BASE_SERVER
              value: "{{ .Values.ingress.host }}"

            - name: REDIS_HOST
              value: "{{ .Values.env.redis.host }}"
            - name: REDIS_PORT
              value: "{{ .Values.env.redis.port }}"
            - name: REDIS_DATABASE
              value: "{{ .Values.env.redis.database }}"
            - name: REDIS_CLUSTER
              value: "1"

            - name: JWT_SECRET
              value: "{{ .Values.env.jwt.secret }}"

            - name: VAULT_ENABLED
              value: "0"
            - name: VAULT_HOST
              value: "{{ .Values.env.vault.host }}"
            - name: VAULT_PORT
              value: "{{ .Values.env.vault.port }}"
            - name: VAULT_CERT
              value: /etc/vault-certificate/default-cert.pem
            - name: VAULT_ROLE
              value: "{{ .Values.env.vault.role }}"

          # volumeMounts:
          #   - name: vault-certificate
          #     mountPath: /etc/vault-certificate
          #     readOnly: true
          #   - name: vault-token
          #     mountPath: /etc/vault

          resources:
            limits:
              cpu: 300m
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 256Mi
